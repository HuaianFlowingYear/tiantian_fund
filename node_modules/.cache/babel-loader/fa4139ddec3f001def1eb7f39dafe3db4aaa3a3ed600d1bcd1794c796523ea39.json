{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u4F4D\\u7F6E\\\\Pictures\\\\\\u5B66\\u4E60\\\\12\\u6708\\u5B66\\u4E60\\\\react\\\\code\\\\Tiantan-fund\\\\src\\\\views\\\\Foo.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// use开头的函数 hook函数\n// useEffect == componentDidMount + componentDidUpdate + componentWillUnmount\nimport { useState, useEffect, useRef } from \"react\";\nimport { root } from \"..\";\n// 基于useEffect实现useComponentDidMount\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction useComponentDidMount(callback) {\n  _s();\n  useEffect(() => {\n    callback();\n  }, [callback]);\n}\n_s(useComponentDidMount, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nfunction Foo() {\n  _s2();\n  const [count, setCount] = useState(123);\n  const divRef = useRef(null);\n  // 使用useEffect实现componentDidMount\n  useEffect(() => {\n    console.log(\"componentDidMount\", 1);\n  }, []);\n  // 使用useEffect实现componentDidMount+ componentDidUpdate\n  useEffect(() => {\n    // console.log(\"componentDidMount+ componentDidUpdate\", 1, \"不打印\");\n  }, [count]);\n  // [count] 这个第二个参数是一个依赖项 指定那个数据发生变化的时候发请求\n  // 使用useEffect实现componentWillUnmount\n  useEffect(() => {\n    return () => {\n      console.log(\"componentWillUnmount\", 2);\n    };\n  }, []);\n  // 1.组件第一次执行 打印1 组件任何数据更新 打印1 组件卸载 打印2\n  useEffect(() => {\n    console.log(1);\n    return () => {\n      console.log(2);\n    };\n  });\n  // 2.组件第一次执行 打印1 组件任何数据更新 不打印 组件卸载 打印2\n  useEffect(() => {\n    console.log(1);\n    return () => {\n      console.log(2);\n    };\n  }, []);\n  useEffect(() => {\n    console.log(divRef.current);\n  }, [divRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      onClick: () => setCount(count + 1),\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => root.unmount(),\n      children: \"\\u9500\\u6BC1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s2(Foo, \"MeAuGK/51IPfiNb47n7dJ7RW5G4=\");\n_c = Foo;\nexport default Foo;\n// react hooks是什么？ 一组能够模拟类组件功能的函数\n// react hooks 是一组函数 只要是use开头的都是hook\n// 为什么要有react hook？\n// 为了让函数组件的功能和类组件相当，但是 学习复杂度+记忆成本 直线降低\n// 类组件 === 函数式组件 + hooks\n\n/**\r\n * hook使用的条件\r\n * hook在组件中使用时必须在组件的顶层 不得出现在任何嵌套结构 （if条件判断 for循环） 中\r\n * react允许你基于官方的hook函数封装自己的自定义hook函数\r\n */\nvar _c;\n$RefreshReg$(_c, \"Foo\");","map":{"version":3,"names":["useState","useEffect","useRef","root","jsxDEV","_jsxDEV","Fragment","_Fragment","useComponentDidMount","callback","_s","Foo","_s2","count","setCount","divRef","console","log","current","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","unmount","_c","$RefreshReg$"],"sources":["D:/软件位置/Pictures/学习/12月学习/react/code/Tiantan-fund/src/views/Foo.jsx"],"sourcesContent":["// use开头的函数 hook函数\r\n// useEffect == componentDidMount + componentDidUpdate + componentWillUnmount\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { root } from \"..\";\r\n// 基于useEffect实现useComponentDidMount\r\nfunction useComponentDidMount(callback) {\r\n  useEffect(() => {\r\n    callback();\r\n  }, [callback]);\r\n}\r\n\r\nfunction Foo() {\r\n  const [count, setCount] = useState(123);\r\n  const divRef = useRef(null);\r\n  // 使用useEffect实现componentDidMount\r\n  useEffect(() => {\r\n    console.log(\"componentDidMount\", 1);\r\n  }, []);\r\n  // 使用useEffect实现componentDidMount+ componentDidUpdate\r\n  useEffect(() => {\r\n    // console.log(\"componentDidMount+ componentDidUpdate\", 1, \"不打印\");\r\n  }, [count]);\r\n  // [count] 这个第二个参数是一个依赖项 指定那个数据发生变化的时候发请求\r\n  // 使用useEffect实现componentWillUnmount\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(\"componentWillUnmount\", 2);\r\n    };\r\n  }, []);\r\n  // 1.组件第一次执行 打印1 组件任何数据更新 打印1 组件卸载 打印2\r\n  useEffect(() => {\r\n    console.log(1);\r\n    return () => {\r\n      console.log(2);\r\n    };\r\n  });\r\n  // 2.组件第一次执行 打印1 组件任何数据更新 不打印 组件卸载 打印2\r\n  useEffect(() => {\r\n    console.log(1);\r\n    return () => {\r\n      console.log(2);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(divRef.current);\r\n  }, [divRef]);\r\n  return (\r\n    <>\r\n      <div ref={divRef} onClick={() => setCount(count + 1)}>\r\n        {count}\r\n      </div>\r\n\r\n      <button onClick={() => root.unmount()}>销毁</button>\r\n    </>\r\n  );\r\n}\r\nexport default Foo;\r\n// react hooks是什么？ 一组能够模拟类组件功能的函数\r\n// react hooks 是一组函数 只要是use开头的都是hook\r\n// 为什么要有react hook？\r\n// 为了让函数组件的功能和类组件相当，但是 学习复杂度+记忆成本 直线降低\r\n// 类组件 === 函数式组件 + hooks\r\n\r\n/**\r\n * hook使用的条件\r\n * hook在组件中使用时必须在组件的顶层 不得出现在任何嵌套结构 （if条件判断 for循环） 中\r\n * react允许你基于官方的hook函数封装自己的自定义hook函数\r\n */\r\n"],"mappings":";;;AAAA;AACA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,IAAI,QAAQ,IAAI;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,oBAAoBA,CAACC,QAAQ,EAAE;EAAAC,EAAA;EACtCT,SAAS,CAAC,MAAM;IACdQ,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;AAChB;AAACC,EAAA,CAJQF,oBAAoB;AAM7B,SAASG,GAAGA,CAAA,EAAG;EAAAC,GAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,GAAG,CAAC;EACvC,MAAMe,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC3B;EACAD,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EACN;EACAhB,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,CAACY,KAAK,CAAC,CAAC;EACX;EACA;EACAZ,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXe,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,CAAC,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;EACAhB,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,CAAC;EACF;EACAhB,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;EAC7B,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EACZ,oBACEV,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBACEd,OAAA;MAAKe,GAAG,EAAEL,MAAO;MAACM,OAAO,EAAEA,CAAA,KAAMP,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAAAM,QAAA,EAClDN;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpB,OAAA;MAAQgB,OAAO,EAAEA,CAAA,KAAMlB,IAAI,CAACuB,OAAO,CAAC,CAAE;MAAAP,QAAA,EAAC;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAClD,CAAC;AAEP;AAACb,GAAA,CA7CQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA8CZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}