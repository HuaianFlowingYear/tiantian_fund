{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u4F4D\\u7F6E\\\\Pictures\\\\\\u5B66\\u4E60\\\\12\\u6708\\u5B66\\u4E60\\\\react\\\\code\\\\Tiantan-fund\\\\src\\\\App.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// 使用函数定义组件 只关心渲染的是谁\n// 组件的渲染就是执行该函数\n// 组件不仅仅需要初次渲染 还需要若干次更新\n// import { useState } from \"react\";\n// import { useData } from \"./utils\";\n// import Foo from \"./views/Foo\";\n// import Layout from \"./views/Layout\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\u6211\\u662FApp\\u7EC4\\u4EF6\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n\n  // 相当于类组件state 和setState\n  // const [a, updateA] = useState(1);\n  // return <div onClick={() => updateA(a + 1)}>我是App组件{a}</div>;\n  // const [a, updateA] = useData(1);\n  // return <div onClick={() => updateA(a.value + 1)}>我是App组件{a.value}</div>;\n}\n// let a = 1;\n// function App() {\n//   const updateA = () => {\n//     a++;\n//     reRenderUI();\n//     console.log(a);\n//     // 值更新 但是UI没有渲染！原因是：你在更新数据的时候App函数并没有重新执行返回新的jsx元素\n//     // 解决方案：在数据更新后调用ReactDOM.render()函数强行更新UI界面\n//     // 遇到新问题：UI界面依旧不更新 （App函数重新执行导致a的值重置为1）\n//     // 解决方案：（将a变为全局变量）\n//   };\n//   return <div onClick={updateA}>我是App组件{a}</div>;\n// }\n\n// 使用类定义组件\n/**\r\n * import React,{Component} from \"react\";\r\n * class App extends Component {\r\n *    render(){\r\n *      return <div>我是App组件</div>\r\n *    }\r\n * }\r\n *\r\n */\n_c = App;\nexport default App;\n\n// props * state\n// componentDidMount\n//\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/软件位置/Pictures/学习/12月学习/react/code/Tiantan-fund/src/App.jsx"],"sourcesContent":["// 使用函数定义组件 只关心渲染的是谁\r\n// 组件的渲染就是执行该函数\r\n// 组件不仅仅需要初次渲染 还需要若干次更新\r\n// import { useState } from \"react\";\r\n// import { useData } from \"./utils\";\r\n// import Foo from \"./views/Foo\";\r\n// import Layout from \"./views/Layout\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      我是App组件\r\n      {/* <Foo />\r\n      <Layout /> */}\r\n    </div>\r\n  );\r\n\r\n  // 相当于类组件state 和setState\r\n  // const [a, updateA] = useState(1);\r\n  // return <div onClick={() => updateA(a + 1)}>我是App组件{a}</div>;\r\n  // const [a, updateA] = useData(1);\r\n  // return <div onClick={() => updateA(a.value + 1)}>我是App组件{a.value}</div>;\r\n}\r\n// let a = 1;\r\n// function App() {\r\n//   const updateA = () => {\r\n//     a++;\r\n//     reRenderUI();\r\n//     console.log(a);\r\n//     // 值更新 但是UI没有渲染！原因是：你在更新数据的时候App函数并没有重新执行返回新的jsx元素\r\n//     // 解决方案：在数据更新后调用ReactDOM.render()函数强行更新UI界面\r\n//     // 遇到新问题：UI界面依旧不更新 （App函数重新执行导致a的值重置为1）\r\n//     // 解决方案：（将a变为全局变量）\r\n//   };\r\n//   return <div onClick={updateA}>我是App组件{a}</div>;\r\n// }\r\n\r\n// 使用类定义组件\r\n/**\r\n * import React,{Component} from \"react\";\r\n * class App extends Component {\r\n *    render(){\r\n *      return <div>我是App组件</div>\r\n *    }\r\n * }\r\n *\r\n */\r\nexport default App;\r\n\r\n// props * state\r\n// componentDidMount\r\n//\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAGA,CAAA,EAAG;EACb,oBACEC,OAAA;IAAAC,QAAA,EAAK;EAEH;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEG,CAAC;;EAGR;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARAC,EAAA,GA9BSP,GAAG;AAuCZ,eAAeA,GAAG;;AAElB;AACA;AACA;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}