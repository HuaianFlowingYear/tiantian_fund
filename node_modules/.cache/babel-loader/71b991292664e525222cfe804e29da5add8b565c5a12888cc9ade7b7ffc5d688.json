{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nexport function useComponentDidMount(callback) {\n  _s();\n  useEffect(() => {\n    if (typeof callback === \"function\") callback();\n  }, [callback]);\n}\n_s(useComponentDidMount, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport function useBeforeDestory(callback) {\n  _s2();\n  useEffect(() => {\n    return () => typeof callback === \"function\" && callback();\n  }, [callback]);\n}\n// 只在组件更新的时候执行\n_s2(useBeforeDestory, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport function useUpdate(callback) {\n  _s3();\n  // useRef也可以存储数据 hook或组件重新执行 但是值不会被重新初始化 保留最后的操作结果\n  // ref变量的变化不会触发组件的重新渲染 但是 可以在多次渲染之间共享数据\n  let isMount = useRef(false);\n  useEffect(() => {\n    if (isMount.current) {\n      typeof callback === \"function\" && callback();\n    } else {\n      isMount.current = true;\n    }\n  });\n}\n// useUpdate 第一次不执行 只在组件更新的时候执行\n_s3(useUpdate, \"BgIt3VhFTgauGSeHDsFElQ7mmJs=\");\nexport function useComponentDidUpdate(callback, dependencies) {}\n// 在第一次渲染时\n// ref变量没有发生变化 ref是非常少见的可变数据 但是react并不会跟踪变化而重新渲染数据","map":{"version":3,"names":["useEffect","useRef","useComponentDidMount","callback","_s","useBeforeDestory","_s2","useUpdate","_s3","isMount","current","useComponentDidUpdate","dependencies"],"sources":["D:/软件位置/Pictures/学习/12月学习/react/code/Tiantan-fund/src/hooks/index.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nexport function useComponentDidMount(callback) {\r\n  useEffect(() => {\r\n    if (typeof callback === \"function\") callback();\r\n  }, [callback]);\r\n}\r\nexport function useBeforeDestory(callback) {\r\n  useEffect(() => {\r\n    return () => typeof callback === \"function\" && callback();\r\n  }, [callback]);\r\n}\r\n// 只在组件更新的时候执行\r\nexport function useUpdate(callback) {\r\n  // useRef也可以存储数据 hook或组件重新执行 但是值不会被重新初始化 保留最后的操作结果\r\n  // ref变量的变化不会触发组件的重新渲染 但是 可以在多次渲染之间共享数据\r\n  let isMount = useRef(false);\r\n  useEffect(() => {\r\n    if (isMount.current) {\r\n      typeof callback === \"function\" && callback();\r\n    } else {\r\n      isMount.current = true;\r\n    }\r\n  });\r\n}\r\n// useUpdate 第一次不执行 只在组件更新的时候执行\r\nexport function useComponentDidUpdate(callback, dependencies) {}\r\n// 在第一次渲染时\r\n// ref变量没有发生变化 ref是非常少见的可变数据 但是react并不会跟踪变化而重新渲染数据\r\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAE;EAAAC,EAAA;EAC7CJ,SAAS,CAAC,MAAM;IACd,IAAI,OAAOG,QAAQ,KAAK,UAAU,EAAEA,QAAQ,CAAC,CAAC;EAChD,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;AAChB;AAACC,EAAA,CAJeF,oBAAoB;AAKpC,OAAO,SAASG,gBAAgBA,CAACF,QAAQ,EAAE;EAAAG,GAAA;EACzCN,SAAS,CAAC,MAAM;IACd,OAAO,MAAM,OAAOG,QAAQ,KAAK,UAAU,IAAIA,QAAQ,CAAC,CAAC;EAC3D,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;AAChB;AACA;AAAAG,GAAA,CALgBD,gBAAgB;AAMhC,OAAO,SAASE,SAASA,CAACJ,QAAQ,EAAE;EAAAK,GAAA;EAClC;EACA;EACA,IAAIC,OAAO,GAAGR,MAAM,CAAC,KAAK,CAAC;EAC3BD,SAAS,CAAC,MAAM;IACd,IAAIS,OAAO,CAACC,OAAO,EAAE;MACnB,OAAOP,QAAQ,KAAK,UAAU,IAAIA,QAAQ,CAAC,CAAC;IAC9C,CAAC,MAAM;MACLM,OAAO,CAACC,OAAO,GAAG,IAAI;IACxB;EACF,CAAC,CAAC;AACJ;AACA;AAAAF,GAAA,CAZgBD,SAAS;AAazB,OAAO,SAASI,qBAAqBA,CAACR,QAAQ,EAAES,YAAY,EAAE,CAAC;AAC/D;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}