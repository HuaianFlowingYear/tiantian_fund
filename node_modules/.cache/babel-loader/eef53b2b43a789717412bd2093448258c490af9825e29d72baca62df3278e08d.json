{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u4F4D\\u7F6E\\\\Pictures\\\\\\u5B66\\u4E60\\\\12\\u6708\\u5B66\\u4E60\\\\react\\\\code\\\\Tiantan-fund\\\\src\\\\views\\\\Foo.jsx\",\n  _s = $RefreshSig$();\n// use开头的函数 hook函数\n// useEffect == componentDidMount + componentDidUpdate + componentWillUnmount\nimport { useState, useEffect } from \"react\";\nimport { root } from \"../index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Foo() {\n  _s();\n  const [count, setCount] = useState(123);\n  // 使用useEffect实现componentDidMount\n  useEffect(() => {\n    console.log(\"componentDidMount\", 1);\n  }, []);\n  // 使用useEffect实现componentDidMount+ componentDidUpdate\n  useEffect(() => {\n    // console.log(\"componentDidMount+ componentDidUpdate\", 1, \"不打印\");\n  }, [count]);\n  // [count] 这个第二个参数是一个依赖项 指定那个数据发生变化的时候发请求\n  // 使用useEffect实现componentWillUnmount\n  useEffect(() => {\n    return () => {\n      console.log(\"componentWillUnmount\", 2);\n    };\n  }, []);\n  // 1.组件第一次执行 打印1 组件任何数据更新 打印1 组件卸载 打印2\n  useEffect(() => {\n    console.log(1);\n    return () => {\n      console.log(2);\n    };\n  });\n  // 2.组件第一次执行 打印1 组件任何数据更新 不打印 组件卸载 打印2\n  useEffect(() => {\n    console.log(1);\n    return () => {\n      console.log(2);\n    };\n  }, []);\n  useEffect(() => {\n    console.log(divRef);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      onClick: () => setCount(count + 1),\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => root.unmount(),\n      children: \"\\u9500\\u6BC1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Foo, \"nACtx4kgpK/Co3bhLsiYSsSlQd4=\");\n_c = Foo;\nexport default Foo;\n// react hooks是什么？ 一组能够模拟类组件功能的函数\n// react hooks 是一组函数 只要是use开头的都是hook\n// 为什么要有react hook？\n// 为了让函数组件的功能和类组件相当，但是 学习复杂度+记忆成本 直线降低\n// 类组件 === 函数式组件 + hooks\nvar _c;\n$RefreshReg$(_c, \"Foo\");","map":{"version":3,"names":["useState","useEffect","root","jsxDEV","_jsxDEV","Fragment","_Fragment","Foo","_s","count","setCount","console","log","divRef","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","unmount","_c","$RefreshReg$"],"sources":["D:/软件位置/Pictures/学习/12月学习/react/code/Tiantan-fund/src/views/Foo.jsx"],"sourcesContent":["// use开头的函数 hook函数\r\n// useEffect == componentDidMount + componentDidUpdate + componentWillUnmount\r\nimport { useState, useEffect } from \"react\";\r\nimport { root } from \"../index\";\r\nfunction Foo() {\r\n  const [count, setCount] = useState(123);\r\n  // 使用useEffect实现componentDidMount\r\n  useEffect(() => {\r\n    console.log(\"componentDidMount\", 1);\r\n  }, []);\r\n  // 使用useEffect实现componentDidMount+ componentDidUpdate\r\n  useEffect(() => {\r\n    // console.log(\"componentDidMount+ componentDidUpdate\", 1, \"不打印\");\r\n  }, [count]);\r\n  // [count] 这个第二个参数是一个依赖项 指定那个数据发生变化的时候发请求\r\n  // 使用useEffect实现componentWillUnmount\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(\"componentWillUnmount\", 2);\r\n    };\r\n  }, []);\r\n  // 1.组件第一次执行 打印1 组件任何数据更新 打印1 组件卸载 打印2\r\n  useEffect(() => {\r\n    console.log(1);\r\n    return () => {\r\n      console.log(2);\r\n    };\r\n  });\r\n  // 2.组件第一次执行 打印1 组件任何数据更新 不打印 组件卸载 打印2\r\n  useEffect(() => {\r\n    console.log(1);\r\n    return () => {\r\n      console.log(2);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(divRef);\r\n  });\r\n  return (\r\n    <>\r\n      <div ref={divRef} onClick={() => setCount(count + 1)}>\r\n        {count}\r\n      </div>\r\n      <button onClick={() => root.unmount()}>销毁</button>\r\n    </>\r\n  );\r\n}\r\nexport default Foo;\r\n// react hooks是什么？ 一组能够模拟类组件功能的函数\r\n// react hooks 是一组函数 只要是use开头的都是hook\r\n// 为什么要有react hook？\r\n// 为了让函数组件的功能和类组件相当，但是 学习复杂度+记忆成本 直线降低\r\n// 类组件 === 函数式组件 + hooks\r\n"],"mappings":";;AAAA;AACA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,IAAI,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAChC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC;EACvC;EACAC,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EACN;EACAX,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,CAACQ,KAAK,CAAC,CAAC;EACX;EACA;EACAR,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXU,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,CAAC,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;EACAX,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,CAAC;EACF;EACAX,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IACd,OAAO,MAAM;MACXD,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;EACrB,CAAC,CAAC;EACF,oBACET,OAAA,CAAAE,SAAA;IAAAQ,QAAA,gBACEV,OAAA;MAAKW,GAAG,EAAEF,MAAO;MAACG,OAAO,EAAEA,CAAA,KAAMN,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAAAK,QAAA,EAClDL;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNhB,OAAA;MAAQY,OAAO,EAAEA,CAAA,KAAMd,IAAI,CAACmB,OAAO,CAAC,CAAE;MAAAP,QAAA,EAAC;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAClD,CAAC;AAEP;AAACZ,EAAA,CA3CQD,GAAG;AAAAe,EAAA,GAAHf,GAAG;AA4CZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AACA;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}