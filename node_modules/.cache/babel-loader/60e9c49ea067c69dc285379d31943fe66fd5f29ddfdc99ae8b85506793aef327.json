{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u8F6F\\u4EF6\\u4F4D\\u7F6E\\\\Pictures\\\\\\u5B66\\u4E60\\\\12\\u6708\\u5B66\\u4E60\\\\react\\\\code\\\\Tiantan-fund\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// 使用函数定义组件 只关心渲染的是谁\n// 组件的渲染就是执行该函数\n// 组件不仅仅需要初次渲染 还需要若干次更新\nimport { useData } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 相当于类组件state 和setState\n  const [a, updateA] = useData(1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => updateA(a.value + 1),\n    children: [\"\\u6211\\u662FApp\\u7EC4\\u4EF6\", a.value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n// let a = 1;\n// function App() {\n//   const updateA = () => {\n//     a++;\n//     reRenderUI();\n//     console.log(a);\n//     // 值更新 但是UI没有渲染！原因是：你在更新数据的时候App函数并没有重新执行返回新的jsx元素\n//     // 解决方案：在数据更新后调用ReactDOM.render()函数强行更新UI界面\n//     // 遇到新问题：UI界面依旧不更新 （App函数重新执行导致a的值重置为1）\n//     // 解决方案：（将a变为全局变量）\n//   };\n//   return <div onClick={updateA}>我是App组件{a}</div>;\n// }\n\n// 使用类定义组件\n/**\r\n * import React,{Component} from \"react\";\r\n * class App extends Component {\r\n *    render(){\r\n *      return <div>我是App组件</div>\r\n *    }\r\n * }\r\n */\n_s(App, \"qCf2Ow5gcnWO7kGrZShVEIDgFsw=\", false, function () {\n  return [useData];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useData","jsxDEV","_jsxDEV","App","_s","a","updateA","onClick","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/软件位置/Pictures/学习/12月学习/react/code/Tiantan-fund/src/App.jsx"],"sourcesContent":["// 使用函数定义组件 只关心渲染的是谁\r\n// 组件的渲染就是执行该函数\r\n// 组件不仅仅需要初次渲染 还需要若干次更新\r\nimport { useData } from \"./utils\";\r\nfunction App() {\r\n  // 相当于类组件state 和setState\r\n  const [a, updateA] = useData(1);\r\n  return <div onClick={() => updateA(a.value + 1)}>我是App组件{a.value}</div>;\r\n}\r\n// let a = 1;\r\n// function App() {\r\n//   const updateA = () => {\r\n//     a++;\r\n//     reRenderUI();\r\n//     console.log(a);\r\n//     // 值更新 但是UI没有渲染！原因是：你在更新数据的时候App函数并没有重新执行返回新的jsx元素\r\n//     // 解决方案：在数据更新后调用ReactDOM.render()函数强行更新UI界面\r\n//     // 遇到新问题：UI界面依旧不更新 （App函数重新执行导致a的值重置为1）\r\n//     // 解决方案：（将a变为全局变量）\r\n//   };\r\n//   return <div onClick={updateA}>我是App组件{a}</div>;\r\n// }\r\n\r\n// 使用类定义组件\r\n/**\r\n * import React,{Component} from \"react\";\r\n * class App extends Component {\r\n *    render(){\r\n *      return <div>我是App组件</div>\r\n *    }\r\n * }\r\n */\r\nexport default App;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,CAAC,EAAEC,OAAO,CAAC,GAAGN,OAAO,CAAC,CAAC,CAAC;EAC/B,oBAAOE,OAAA;IAAKK,OAAO,EAAEA,CAAA,KAAMD,OAAO,CAACD,CAAC,CAACG,KAAK,GAAG,CAAC,CAAE;IAAAC,QAAA,GAAC,6BAAO,EAACJ,CAAC,CAACG,KAAK;EAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPAT,EAAA,CApBSD,GAAG;EAAA,QAEWH,OAAO;AAAA;AAAAc,EAAA,GAFrBX,GAAG;AA4BZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}